package blockstore

import (
	"testing"

	"github.com/gagliardetto/solana-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"go.firedancer.io/radiance/fixtures"
	"go.firedancer.io/radiance/pkg/shred"
)

func TestDataShredsToEntries_Mainnet_Genesis(t *testing.T) {
	rawShreds := fixtures.DataShreds(t, "mainnet", 0)
	shreds := parseShreds(t, rawShreds, 1)
	meta := &SlotMeta{
		Consumed:           3,
		Received:           3,
		LastIndex:          2,
		NumEntryEndIndexes: 1,
		EntryEndIndexes:    []uint32{2},
	}
	entries, err := DataShredsToEntries(meta, shreds)
	require.NoError(t, err)
	assert.Len(t, entries, 1)
	assert.Equal(t, shreds, entries[0].Shreds)
	assert.Equal(t, 3080, len(entries[0].Raw))
	assert.Equal(t, []shred.Entry{
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("BEgmsE3RjuKda9PpnF8r5Ch4HJMHttEhTt38jsyuKuaV"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("7GSbH4g5eTo5jehuAcQmKuoFnTNaYdFRWYJraMCYJ4pY"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("cXQPc1rqMHwxtDfLEJ9CdFWguD9LMnuKaAadwgnoAU9"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("GsdubVEKzBBxdwpRrYPsCoF6TxkwLkJC7vaoAcWvQ6zj"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("GVPeccPmHPAD7sN5za67jvuvRbyJDrZMdFPJgc5k4ApF"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("HCKdcqbc9xQjg4dAqRtJSte4teNRNGuRdQaXbcFqwmsi"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("8JC6mNJbS8JFEm7bhEgkRzk9n6aueX49wXm1hKbMRXtD"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("2weUJw23EwjYkDdH5TWP4iBwgXPW88YDgtLqFUnq5iW2"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("HDUsEkxvxps4KZHHcg1g1Kvkx6xHHQEjb6diEWEbykLs"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("EW44ssuR2hgVYr22WYvRhyWpSwvqpj9FqR268EmyWrp1"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("EZ8KLZWb4fJTqty1PYjmiZjBa7LG1vZiVP385Tf1wGSv"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("4rFoMK6rVXTwKcyeG7GKg7CGTTJpUaLV6nfk4aApHncA"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("2XfkNnbeLgiWFJG88cDvie63Ay4DhF9yVhpaLwVmZvYM"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("Dv8SnjbyB3FHhoct34FNUmsxzgkVTG82nxDaMKLXnHZv"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("8eMT19ctrhoh7buqug6FL5yaDybEhpdGspEfW4Vmr8B2"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("9N8vjyY7mV6Ln77LaG4MZJWdGDApi6gw2Mf3EZ7h74AM"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("AVMHML49UUPxhcVY2QEpULbNXHNxfEHKj1J2cAbEs9Vp"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("DhfgF92wssf9sussfcf2A9gZ9rTJs9k4CuDKf5K9aoMm"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("Hzg7Ptw7fH8gqfaN5FjADcB4kw1XyfZgeCTJhcz9Dt9Y"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("7UDgQWeCGsdjgKDkLDgQ8TA5uuWhUnk6Yf3UwjKRAvS4"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("2ZDGg77CJd9PrGakiApavtY8nTwM6a35ENbuLe1sLXqJ"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("GUDUf6Dj2PZ9qsySXE85qWRj2Ax7peVnTh8AQa4wEHq2"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("FBWpsKo4XZ5jxHh2L3yr17jpe9JdZd7wTDzskA6zYUQW"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("8o6zDK3dC1rJ6UvaZazcYRACTX1zjAvUsGjua2YMWJtX"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("93krGb8CjfAzFWXbcXMUgaiAkLuWQ9wPiwpgG4L153Ji"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("14ngqzcDAwQSkGyYXbV8KHtMtQSup7FFSa7qHS74qS65"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("EdokMAJe1FEkXJeoL4CB1FvKMan63PJ3AgjZzLT5ZHF4"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("2gJtJPAmHY4VCQkF7EmpsBGNRi3122uFebcPJZAVvozf"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("ALffShUMdNB2548HAKU5dwdd1K8JNiApytn8RBKFA5MY"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("3YEHfjSheJX87bME3wNvXN6kEfuHHwsxn7EjaMTRFE9Z"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("2t1F4YsuJSYHNwougVtqHgJHZ7yBswcKpxJnUUYigE1Q"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("8vXxmsQaMQqE3zMmS1FF3UHDho9rVY6sotp5BSNEbS9X"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("CZuyDW5rZFcDHChQRS6FAAcTQHjt5Xh1CL6sKQoMPFND"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("5gws32wDVTpuFrNhCqZwxxu5B8CKvSW9yf4VrqbNWjH7"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("5PJC6VVWQnvqaioJ2wevRFhmoQNCBX9s5h1Kbj6JE5no"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("6WAAcuMZHv1rd1b6v92fqny4dsGSY7Hy6EJpGMmAAznh"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("5joYwpeat27k6XXs3NzJfV7hkw4juX7CCUZvb98dTWJt"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("CNqKzPgR3HUEdf7j6bqj63z86ov5oPTjEitJX8vMucsP"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("HTCaWhSSNviX6YDAyMteKpcgQkAY4GzaMvmKXdkqsvx5"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("4yEgDCGrWidGYjWXL5B3Hcfg7GhwLUdpBYbausUxT2Md"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("HmVzH2rs2oMw2jka3faNT4StoUQhKEVNRsucSbFJgUzQ"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("8UiBLqWrzUhEEtEbf4UhtikFD4qWqzE8aGoimbubT33r"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("uw3ierG673dDLNHTLBAYk6vGp2XzP6MnabjzasqkRLg"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("HkVC9Dm1xm2A4tiFtqodjRBawX38Y4WhPHn5dxDLHowT"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("FMfLjob5dfTmXPuY97TuuWBRZk4qEzkYao6TdZQXSNU9"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("6brZ9hfpcpqq9AUNSa1WYrDWwUazR7uUYDutNn7AxrYq"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("GddzudgJRbP7pZYw7s62VwBzeyjQTcKC6mkN8Ke7Vc6p"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("Gwk1E6CeD1a4Az9Y6Dw9gm1cXWnYFAGioj3UrmttPFGs"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("497LZxPFN8UMparCsDRM2Xwctz9Yr6ggRRxrRWYiYUnr"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("GgV4yq8mU1H8DPqegPqEoyU66jc8dvrrvy5P1kURpUmB"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("mgHymgwdvc5fNukape9sMCAd5HTKoEQQTwxNNtb8Rat"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("2LPLYYGtvfzVBXS7nYYYhBezo36PpvpPJR3TrNfAj3tB"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("FsHZMmXjqNd11HHuCFUTifCC1PzDa5Qa73Et1Pq5CgEN"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("8uq7LJ8GNCoNcsTBgqWLNnxAmR9G2954fdJLw7d22ze8"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("3LaPqPMbS57jESrHL6j8i4CDSCFqioHYM4nw8pMHkyH7"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("5H8mKSpdwXfa7B7NcS7NSRA5qFvmYsnSmfFj1URwF9VV"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("C1dX3PxkzPUeRX4WhsLPgULnisGHWtx1iEw7gTUqbEQe"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("CPosYdr3P8mndtQXF4zkr11KcVuXucMjqrvL7sxJjz4L"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("GrLSqSMZPyeQDySx9RGmFwhgLa67jrhEXsVpZuSwQ51c"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("CBmrfRRb2zghqbHyeiPdfXWGrC5naMT3USR35aeLVYRH"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("4EzStQd1KbsBrmHhfR5r8a6NhaYFAN5bi7t5tVmEMh5U"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("ExLNu3PUdfsyq4DCWYb7VaafoBguxj4bRgyxbfuACQaq"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("Ap9zjPARQp8PRFGFirio2WP7zghbALResHdS9u4FwXZr"),
			Txns:      []solana.Transaction{},
		},
		{
			NumHashes: 12500,
			Hash:      solana.MustHashFromBase58("4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZAMdL4VZHirAn"),
			Txns:      []solana.Transaction{},
		},
	}, entries[0].Entries)
}

var mainnet_102815960_EntryEndIndexes = []uint32{
	0, 1, 2, 3, 5, 16, 17, 18, 20, 21, 22, 23, 24, 26, 28, 30, 31, 34, 35, 37, 38, 39, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 62, 63, 69, 74, 75, 77, 81, 82, 83, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 101, 102, 103, 104, 105, 107, 108, 114, 115, 116, 117, 123, 124, 127, 133, 136, 137, 138,
	143, 144, 145, 146, 147, 148, 152, 154, 155, 156, 159, 169, 170, 171, 177, 178, 180, 182, 183, 184, 185,
	186, 187, 188, 189, 190, 191, 196, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 215,
	216, 217, 218, 219, 221, 223, 232, 235, 237, 239, 242, 243, 245, 246, 249, 251, 253, 254, 255, 260, 265,
	285, 286, 287, 292, 293, 301, 302, 303, 304, 305, 313, 314, 315, 327, 334, 335, 343, 344, 345, 346, 355,
	364, 370, 371, 372, 373, 379, 380, 381, 382, 389, 398, 405, 406, 417, 418, 425, 426, 427, 428, 429, 430,
	439, 440, 441, 450, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 478, 479, 480, 481, 482, 483, 484,
	495, 496, 497, 498, 499, 500, 501, 514, 516, 517, 532, 533, 534, 535, 536, 537, 547, 549, 558, 559, 560,
	572, 573, 574, 575, 586, 587, 588, 589, 590, 591, 602, 603, 613, 616, 625, 626, 627, 628, 629, 630, 636,
	637, 638, 644, 645, 646, 653, 654, 655, 656, 663, 664, 665, 666, 675, 677, 684, 685, 686, 687, 688, 689,
	690, 695, 700, 702, 708, 716, 722, 725, 726, 727, 731, 733, 735, 741, 742, 743, 745, 746, 747, 748, 751,
	752, 754, 759, 766, 770, 776, 777, 778, 779, 780, 781, 786, 791, 799, 802, 810, 813, 820, 821, 822, 823,
	824, 825, 826, 827, 828, 829, 830, 838, 846, 848, 849, 850, 851, 852, 861, 862, 863, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 892, 893, 894, 895, 896, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 933, 934, 935, 936, 937, 938, 939, 940, 954, 955, 956, 957, 958, 959, 975, 976, 977,
	978, 994, 997, 998, 999, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1039, 1040, 1041, 1056,
	1059, 1060, 1061, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1090, 1091, 1092, 1093,
	1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1115, 1117, 1118, 1119, 1122, 1123, 1124, 1125, 1126, 1138,
	1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1164, 1165, 1166, 1167, 1168,
	1182, 1184, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1213, 1214, 1215, 1220, 1222,
	1223, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241,
	1242, 1243, 1244, 1245, 1246, 1247, 1262, 1265, 1266, 1267, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279,
	1289, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308,
	1309, 1310, 1311, 1322, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338,
	1347, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1367, 1368, 1369, 1370, 1371, 1372,
	1373, 1374, 1379, 1384, 1385, 1386, 1388, 1389, 1394, 1395, 1396, 1397, 1398, 1403, 1404, 1407, 1416, 1417,
	1422, 1423, 1425, 1426,
}

func TestDataShredsToEntries_Mainnet_Recent(t *testing.T) {
	rawShreds := fixtures.DataShreds(t, "mainnet", 102815960)
	shreds := parseShreds(t, rawShreds, 2)
	meta := &SlotMeta{
		Consumed:           1427,
		Received:           1427,
		LastIndex:          1426,
		NumEntryEndIndexes: 574,
		EntryEndIndexes:    mainnet_102815960_EntryEndIndexes,
	}
	entries, err := DataShredsToEntries(meta, shreds)
	require.NoError(t, err)
	assert.Equal(t, 574, len(entries))
	{
		transactions := findTransactions(entries, 10)
		assert.Equal(t, 10, len(transactions))
		assert.Equal(t,
			solana.MustSignatureFromBase58("5ruUBRn3CNNcFneJtEaJBaUjhtHtEb6Q9Hu2ygTSA9TjLr6FtE2WGGBkt7nUAHc1fnBaL8DGMS6maeCYHpRzuY6K"),
			transactions[0].Signatures[0],
		)
		assert.Equal(t,
			solana.MustSignatureFromBase58("REnUxGXrE22u5KsxynCoMQDuVY6eyAZFPyxg8HccHJQtr3GXQ6eA4T2ZhZyfC1NgbR1wt9EiRjYaWNgtDCSTwim"),
			transactions[1].Signatures[0],
		)
		assert.Equal(t,
			solana.MustSignatureFromBase58("5YfaAQEZYrU84ftEGSW8i97ZfQ5aezZrvazTu6VCHFJ9xWUxYo6WwXV86diMNt1LRSNho3Ev6kvzHN9eN8z488NW"),
			transactions[2].Signatures[0],
		)
		assert.Equal(t,
			solana.MustSignatureFromBase58("662prxNx8sgR7s3vT7Xkzj4uYG72xjA9frBfm4QFZNqbGQEhFMNjCti7zBDBnWDTjMZKV1bo53rxDrrwP9D1kGHR"),
			transactions[3].Signatures[0],
		)
		assert.Equal(t,
			solana.MustSignatureFromBase58("43yAFJnaZm5caXfUvzXDKaeYhgYzfBYvHpwzTiEhs1uRHDWibVGSTS2eh6eZiYaZgQbjkYCR7dZ5TsKwTYFNXHi1"),
			transactions[4].Signatures[0],
		)
		assert.Equal(t,
			solana.MustSignatureFromBase58("2wbiisDTsTQnWedDogjTU2qV2frLPt7GeS1wbn7TzziYxTU7MHCAP7po8s8yRbfU6Y59uY9hdFUKwxZK7ehZYUAW"),
			transactions[5].Signatures[0],
		)
		assert.Equal(t,
			solana.MustSignatureFromBase58("3JbSLxaNTVTdhSp2HLjxbqNiWxdPz6dcd3Xw5sFnzyG5yFQehLQVi6UjPZ68msJALxSgDJWX9xm8YjYC9CUJMVj"),
			transactions[6].Signatures[0],
		)
		assert.Equal(t,
			solana.MustSignatureFromBase58("2oZxvCcSqKG719R8MNguXvnRTCcUHAbyn14gnYEskB9SE1bhvzKBhrWFDAx6VyE3ac2JnzrBUcZvJLmWBK7EJ4XJ"),
			transactions[7].Signatures[0],
		)
		assert.Equal(t,
			solana.MustSignatureFromBase58("4GFhtws8R3jD68t45fAKmoUUKtEHoicKyNK53mpgTJ778NSepZnGdZminXTmX2GzMNpqsft23VrZVn3qrHseEo7c"),
			transactions[8].Signatures[0],
		)
		assert.Equal(t,
			solana.MustSignatureFromBase58("2p5jNjuLeMufeDH4euwNXqb9fi3gFH7R6cprPVVzGozM6R7qhXTuahN8gm2J5mjHk1NJdb7WTG9a6GturYpWUPhq"),
			transactions[9].Signatures[0],
		)
	}
	{
		transactions := findTransactions(entries, 4000)
		assert.Equal(t, 3177, len(transactions))
	}
}

func parseShreds(t testing.TB, raw [][]byte, version int) (shreds []shred.Shred) {
	shreds = make([]shred.Shred, len(raw))
	for i, buf := range raw {
		shreds[i] = shred.NewShredFromSerialized(buf, version)
		require.NotNil(t, shreds[i], "invalid shred %d", i)
		// Forgetting this assert cost me half an hour of time
		assert.Equal(t, shreds[i].Index, uint32(i))
	}
	return shreds
}

func findTransactions(entries []Entries, limit int) []solana.Transaction {
	transactions := make([]solana.Transaction, 0, limit)
	for _, entry := range entries {
		for _, e := range entry.Entries {
			for txIndex := range e.Txns {
				tx := e.Txns[txIndex]
				transactions = append(transactions, tx)
				if len(transactions) >= limit {
					return transactions
				}
			}
		}
	}
	return transactions
}

func TestMerkleShreds(t *testing.T) {
	shredToParsed := []struct {
		Raw    []byte
		Parsed shred.Shred
	}{
		{
			Raw:    []byte{190, 145, 238, 108, 132, 87, 63, 224, 208, 84, 222, 92, 87, 201, 228, 54, 168, 162, 37, 79, 181, 209, 115, 198, 65, 200, 233, 205, 205, 186, 123, 91, 149, 119, 155, 20, 40, 93, 98, 16, 145, 19, 180, 191, 49, 251, 253, 27, 133, 59, 173, 178, 22, 226, 72, 162, 10, 79, 49, 235, 184, 49, 62, 11, 134, 117, 28, 27, 19, 0, 0, 0, 0, 208, 1, 0, 0, 173, 195, 188, 1, 0, 0, 1, 0, 24, 59, 4, 239, 205, 11, 188, 79, 33, 169, 2, 56, 126, 198, 140, 203, 220, 99, 55, 83, 15, 93, 41, 119, 63, 24, 39, 98, 197, 182, 26, 248, 255, 231, 102, 48, 76, 56, 100, 77, 144, 209, 184, 87, 247, 217, 56, 50, 193, 35, 47, 65, 51, 179, 211, 233, 184, 140, 101, 122, 1, 1, 0, 1, 3, 223, 9, 84, 137, 180, 69, 161, 238, 134, 103, 17, 49, 123, 216, 12, 185, 195, 105, 16, 95, 58, 202, 206, 159, 191, 145, 195, 28, 54, 230, 227, 149, 222, 238, 47, 125, 52, 238, 114, 31, 188, 134, 55, 127, 134, 168, 252, 139, 0, 114, 210, 192, 164, 38, 111, 78, 72, 183, 221, 11, 138, 89, 112, 153, 7, 97, 72, 29, 53, 116, 116, 187, 124, 77, 118, 36, 235, 211, 189, 179, 216, 53, 94, 115, 209, 16, 67, 252, 13, 163, 83, 128, 0, 0, 0, 0, 213, 12, 170, 206, 113, 174, 119, 240, 217, 99, 134, 51, 224, 128, 99, 217, 66, 230, 39, 122, 2, 109, 232, 42, 12, 168, 175, 101, 121, 245, 62, 215, 1, 2, 2, 1, 0, 116, 12, 0, 0, 0, 85, 28, 27, 19, 0, 0, 0, 0, 31, 1, 31, 1, 30, 1, 29, 1, 28, 1, 27, 1, 26, 1, 25, 1, 24, 1, 23, 1, 22, 1, 21, 1, 20, 1, 19, 1, 18, 1, 17, 1, 16, 1, 15, 1, 14, 1, 13, 1, 12, 1, 11, 1, 10, 1, 9, 1, 8, 1, 7, 1, 6, 1, 5, 1, 4, 1, 3, 1, 2, 1, 1, 54, 155, 222, 110, 129, 239, 129, 2, 14, 57, 112, 244, 23, 0, 190, 186, 6, 79, 131, 76, 232, 39, 188, 94, 244, 162, 59, 246, 205, 198, 107, 60, 1, 113, 227, 174, 103, 0, 0, 0, 0, 200, 1, 0, 0, 0, 0, 0, 0, 204, 8, 101, 215, 180, 47, 141, 180, 95, 86, 125, 96, 93, 93, 95, 225, 163, 99, 231, 55, 241, 190, 214, 163, 219, 143, 144, 173, 37, 61, 155, 111, 1, 0, 0, 0, 0, 0, 0, 0, 1, 152, 172, 241, 254, 8, 62, 174, 4, 46, 57, 73, 33, 78, 196, 182, 192, 86, 23, 39, 214, 41, 61, 115, 192, 113, 1, 132, 51, 209, 206, 137, 53, 111, 90, 222, 208, 130, 84, 39, 33, 21, 191, 114, 116, 183, 125, 36, 61, 74, 37, 157, 98, 151, 243, 165, 113, 14, 33, 13, 229, 164, 45, 123, 0, 1, 0, 1, 3, 14, 85, 62, 180, 200, 47, 183, 211, 53, 25, 216, 143, 10, 241, 11, 218, 227, 104, 127, 107, 233, 86, 98, 234, 121, 113, 44, 119, 8, 141, 225, 33, 146, 29, 251, 145, 162, 97, 102, 93, 170, 14, 152, 210, 164, 103, 158, 42, 226, 30, 103, 241, 30, 193, 223, 42, 68, 248, 197, 251, 241, 42, 221, 154, 7, 97, 72, 29, 53, 116, 116, 187, 124, 77, 118, 36, 235, 211, 189, 179, 216, 53, 94, 115, 209, 16, 67, 252, 13, 163, 83, 128, 0, 0, 0, 0, 213, 12, 170, 206, 113, 174, 119, 240, 217, 99, 134, 51, 224, 128, 99, 217, 66, 230, 39, 122, 2, 109, 232, 42, 12, 168, 175, 101, 121, 245, 62, 215, 1, 2, 2, 1, 0, 116, 12, 0, 0, 0, 85, 28, 27, 19, 0, 0, 0, 0, 31, 1, 31, 1, 30, 1, 29, 1, 28, 1, 27, 1, 26, 1, 25, 1, 24, 1, 23, 1, 22, 1, 21, 1, 20, 1, 19, 1, 18, 1, 17, 1, 16, 1, 15, 1, 14, 1, 13, 1, 12, 1, 11, 1, 10, 1, 9, 1, 8, 1, 7, 1, 6, 1, 5, 1, 4, 1, 3, 1, 2, 1, 1, 54, 155, 222, 110, 129, 239, 129, 2, 14, 57, 112, 244, 23, 0, 190, 186, 6, 79, 131, 76, 232, 39, 188, 94, 244, 162, 59, 246, 205, 198, 107, 60, 1, 113, 227, 174, 103, 0, 0, 0, 0, 245, 1, 0, 0, 0, 0, 0, 0, 251, 127, 107, 218, 116, 217, 80, 124, 75, 43, 22, 28, 147, 144, 199, 136, 171, 243, 147, 125, 245, 253, 30, 173, 15, 169, 89, 55, 211, 137, 53, 12, 1, 0, 0, 0, 0, 0, 0, 0, 1, 242, 88, 163, 129, 196, 0, 94, 171, 251, 251, 43, 29, 98, 30, 208, 230, 144, 17, 253, 124, 7, 250, 90, 134, 43, 3, 131, 47, 97, 240, 197, 36, 168, 246, 102, 201, 105, 70, 34, 1, 69, 68, 219, 147, 189, 105, 236, 67, 225, 49, 151, 147, 130, 31, 65, 155, 95, 209, 198, 37, 30, 153, 125, 8, 1, 0, 1, 3, 250, 145, 158, 178, 168, 56, 119, 213, 176, 148, 205, 93, 126, 171, 38, 116, 157, 21, 82, 97, 84, 161, 252, 156, 55, 104, 255, 222, 94, 142, 73, 229, 80, 248, 233, 50, 229, 186, 27, 1, 32, 120, 151, 124, 133, 176, 235, 180, 93, 80, 224, 145, 31, 108, 164, 189, 109, 244, 205, 166, 49, 99, 6, 230, 7, 97, 72, 29, 53, 116, 116, 187, 124, 77, 118, 36, 235, 211, 189, 179, 216, 53, 94, 115, 209, 16, 67, 252, 13, 163, 83, 128, 0, 0, 0, 0, 213, 12, 170, 206, 113, 174, 119, 240, 217, 99, 134, 51, 224, 128, 99, 217, 66, 230, 39, 122, 2, 109, 232, 42, 12, 168, 175, 101, 121, 245, 62, 215, 1, 2, 2, 1, 0, 116, 12, 0, 0, 0, 85, 28, 27, 19, 0, 0, 0, 0, 31, 1, 31, 1, 30, 1, 29, 1, 28, 1, 27, 1, 26, 1, 25, 1, 24, 1, 23, 1, 22, 1, 21, 1, 20, 1, 19, 1, 18, 1, 17, 1, 16, 1, 15, 1, 14, 1, 13, 1, 12, 1, 11, 1, 10, 1, 9, 1, 8, 1, 7, 1, 6, 81, 130, 86, 5, 74, 29, 214, 138, 175, 213, 112, 238, 209, 73, 138, 45, 201, 149, 92, 16, 155, 144, 225, 247, 126, 219, 153, 6, 69, 22, 148, 227, 90, 221, 15, 169, 89, 15, 148, 111, 10, 44, 80, 163, 100, 17, 52, 198, 132, 210, 36, 27, 33, 185, 25, 120, 42, 48, 105, 193, 96, 100, 89, 176, 203, 99, 168, 96, 161, 165, 236, 136, 100, 25, 233, 136, 164, 131, 65, 218, 157, 83, 134, 178, 30, 196, 177, 206, 210, 111, 31, 147, 221, 0, 105, 245, 129, 67, 236, 23, 109, 61, 79, 106, 154, 18, 59, 99, 138, 127, 169, 234, 16, 124, 247, 78, 80, 6, 248, 17},
			Parsed: shred.Shred{CommonHeader: shred.CommonHeader{Signature: solana.Signature{0xbe, 0x91, 0xee, 0x6c, 0x84, 0x57, 0x3f, 0xe0, 0xd0, 0x54, 0xde, 0x5c, 0x57, 0xc9, 0xe4, 0x36, 0xa8, 0xa2, 0x25, 0x4f, 0xb5, 0xd1, 0x73, 0xc6, 0x41, 0xc8, 0xe9, 0xcd, 0xcd, 0xba, 0x7b, 0x5b, 0x95, 0x77, 0x9b, 0x14, 0x28, 0x5d, 0x62, 0x10, 0x91, 0x13, 0xb4, 0xbf, 0x31, 0xfb, 0xfd, 0x1b, 0x85, 0x3b, 0xad, 0xb2, 0x16, 0xe2, 0x48, 0xa2, 0xa, 0x4f, 0x31, 0xeb, 0xb8, 0x31, 0x3e, 0xb}, Variant: 0x86, Slot: 0x131b1c75, Index: 0x1d0, Version: 0xc3ad, FECSetIndex: 0x1bc}, DataHeader: shred.DataHeader{ParentOffset: 0x1, Flags: 0x18, Size: 0x43b}, Payload: []uint8{0xef, 0xcd, 0xb, 0xbc, 0x4f, 0x21, 0xa9, 0x2, 0x38, 0x7e, 0xc6, 0x8c, 0xcb, 0xdc, 0x63, 0x37, 0x53, 0xf, 0x5d, 0x29, 0x77, 0x3f, 0x18, 0x27, 0x62, 0xc5, 0xb6, 0x1a, 0xf8, 0xff, 0xe7, 0x66, 0x30, 0x4c, 0x38, 0x64, 0x4d, 0x90, 0xd1, 0xb8, 0x57, 0xf7, 0xd9, 0x38, 0x32, 0xc1, 0x23, 0x2f, 0x41, 0x33, 0xb3, 0xd3, 0xe9, 0xb8, 0x8c, 0x65, 0x7a, 0x1, 0x1, 0x0, 0x1, 0x3, 0xdf, 0x9, 0x54, 0x89, 0xb4, 0x45, 0xa1, 0xee, 0x86, 0x67, 0x11, 0x31, 0x7b, 0xd8, 0xc, 0xb9, 0xc3, 0x69, 0x10, 0x5f, 0x3a, 0xca, 0xce, 0x9f, 0xbf, 0x91, 0xc3, 0x1c, 0x36, 0xe6, 0xe3, 0x95, 0xde, 0xee, 0x2f, 0x7d, 0x34, 0xee, 0x72, 0x1f, 0xbc, 0x86, 0x37, 0x7f, 0x86, 0xa8, 0xfc, 0x8b, 0x0, 0x72, 0xd2, 0xc0, 0xa4, 0x26, 0x6f, 0x4e, 0x48, 0xb7, 0xdd, 0xb, 0x8a, 0x59, 0x70, 0x99, 0x7, 0x61, 0x48, 0x1d, 0x35, 0x74, 0x74, 0xbb, 0x7c, 0x4d, 0x76, 0x24, 0xeb, 0xd3, 0xbd, 0xb3, 0xd8, 0x35, 0x5e, 0x73, 0xd1, 0x10, 0x43, 0xfc, 0xd, 0xa3, 0x53, 0x80, 0x0, 0x0, 0x0, 0x0, 0xd5, 0xc, 0xaa, 0xce, 0x71, 0xae, 0x77, 0xf0, 0xd9, 0x63, 0x86, 0x33, 0xe0, 0x80, 0x63, 0xd9, 0x42, 0xe6, 0x27, 0x7a, 0x2, 0x6d, 0xe8, 0x2a, 0xc, 0xa8, 0xaf, 0x65, 0x79, 0xf5, 0x3e, 0xd7, 0x1, 0x2, 0x2, 0x1, 0x0, 0x74, 0xc, 0x0, 0x0, 0x0, 0x55, 0x1c, 0x1b, 0x13, 0x0, 0x0, 0x0, 0x0, 0x1f, 0x1, 0x1f, 0x1, 0x1e, 0x1, 0x1d, 0x1, 0x1c, 0x1, 0x1b, 0x1, 0x1a, 0x1, 0x19, 0x1, 0x18, 0x1, 0x17, 0x1, 0x16, 0x1, 0x15, 0x1, 0x14, 0x1, 0x13, 0x1, 0x12, 0x1, 0x11, 0x1, 0x10, 0x1, 0xf, 0x1, 0xe, 0x1, 0xd, 0x1, 0xc, 0x1, 0xb, 0x1, 0xa, 0x1, 0x9, 0x1, 0x8, 0x1, 0x7, 0x1, 0x6, 0x1, 0x5, 0x1, 0x4, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x36, 0x9b, 0xde, 0x6e, 0x81, 0xef, 0x81, 0x2, 0xe, 0x39, 0x70, 0xf4, 0x17, 0x0, 0xbe, 0xba, 0x6, 0x4f, 0x83, 0x4c, 0xe8, 0x27, 0xbc, 0x5e, 0xf4, 0xa2, 0x3b, 0xf6, 0xcd, 0xc6, 0x6b, 0x3c, 0x1, 0x71, 0xe3, 0xae, 0x67, 0x0, 0x0, 0x0, 0x0, 0xc8, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcc, 0x8, 0x65, 0xd7, 0xb4, 0x2f, 0x8d, 0xb4, 0x5f, 0x56, 0x7d, 0x60, 0x5d, 0x5d, 0x5f, 0xe1, 0xa3, 0x63, 0xe7, 0x37, 0xf1, 0xbe, 0xd6, 0xa3, 0xdb, 0x8f, 0x90, 0xad, 0x25, 0x3d, 0x9b, 0x6f, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x98, 0xac, 0xf1, 0xfe, 0x8, 0x3e, 0xae, 0x4, 0x2e, 0x39, 0x49, 0x21, 0x4e, 0xc4, 0xb6, 0xc0, 0x56, 0x17, 0x27, 0xd6, 0x29, 0x3d, 0x73, 0xc0, 0x71, 0x1, 0x84, 0x33, 0xd1, 0xce, 0x89, 0x35, 0x6f, 0x5a, 0xde, 0xd0, 0x82, 0x54, 0x27, 0x21, 0x15, 0xbf, 0x72, 0x74, 0xb7, 0x7d, 0x24, 0x3d, 0x4a, 0x25, 0x9d, 0x62, 0x97, 0xf3, 0xa5, 0x71, 0xe, 0x21, 0xd, 0xe5, 0xa4, 0x2d, 0x7b, 0x0, 0x1, 0x0, 0x1, 0x3, 0xe, 0x55, 0x3e, 0xb4, 0xc8, 0x2f, 0xb7, 0xd3, 0x35, 0x19, 0xd8, 0x8f, 0xa, 0xf1, 0xb, 0xda, 0xe3, 0x68, 0x7f, 0x6b, 0xe9, 0x56, 0x62, 0xea, 0x79, 0x71, 0x2c, 0x77, 0x8, 0x8d, 0xe1, 0x21, 0x92, 0x1d, 0xfb, 0x91, 0xa2, 0x61, 0x66, 0x5d, 0xaa, 0xe, 0x98, 0xd2, 0xa4, 0x67, 0x9e, 0x2a, 0xe2, 0x1e, 0x67, 0xf1, 0x1e, 0xc1, 0xdf, 0x2a, 0x44, 0xf8, 0xc5, 0xfb, 0xf1, 0x2a, 0xdd, 0x9a, 0x7, 0x61, 0x48, 0x1d, 0x35, 0x74, 0x74, 0xbb, 0x7c, 0x4d, 0x76, 0x24, 0xeb, 0xd3, 0xbd, 0xb3, 0xd8, 0x35, 0x5e, 0x73, 0xd1, 0x10, 0x43, 0xfc, 0xd, 0xa3, 0x53, 0x80, 0x0, 0x0, 0x0, 0x0, 0xd5, 0xc, 0xaa, 0xce, 0x71, 0xae, 0x77, 0xf0, 0xd9, 0x63, 0x86, 0x33, 0xe0, 0x80, 0x63, 0xd9, 0x42, 0xe6, 0x27, 0x7a, 0x2, 0x6d, 0xe8, 0x2a, 0xc, 0xa8, 0xaf, 0x65, 0x79, 0xf5, 0x3e, 0xd7, 0x1, 0x2, 0x2, 0x1, 0x0, 0x74, 0xc, 0x0, 0x0, 0x0, 0x55, 0x1c, 0x1b, 0x13, 0x0, 0x0, 0x0, 0x0, 0x1f, 0x1, 0x1f, 0x1, 0x1e, 0x1, 0x1d, 0x1, 0x1c, 0x1, 0x1b, 0x1, 0x1a, 0x1, 0x19, 0x1, 0x18, 0x1, 0x17, 0x1, 0x16, 0x1, 0x15, 0x1, 0x14, 0x1, 0x13, 0x1, 0x12, 0x1, 0x11, 0x1, 0x10, 0x1, 0xf, 0x1, 0xe, 0x1, 0xd, 0x1, 0xc, 0x1, 0xb, 0x1, 0xa, 0x1, 0x9, 0x1, 0x8, 0x1, 0x7, 0x1, 0x6, 0x1, 0x5, 0x1, 0x4, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x36, 0x9b, 0xde, 0x6e, 0x81, 0xef, 0x81, 0x2, 0xe, 0x39, 0x70, 0xf4, 0x17, 0x0, 0xbe, 0xba, 0x6, 0x4f, 0x83, 0x4c, 0xe8, 0x27, 0xbc, 0x5e, 0xf4, 0xa2, 0x3b, 0xf6, 0xcd, 0xc6, 0x6b, 0x3c, 0x1, 0x71, 0xe3, 0xae, 0x67, 0x0, 0x0, 0x0, 0x0, 0xf5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfb, 0x7f, 0x6b, 0xda, 0x74, 0xd9, 0x50, 0x7c, 0x4b, 0x2b, 0x16, 0x1c, 0x93, 0x90, 0xc7, 0x88, 0xab, 0xf3, 0x93, 0x7d, 0xf5, 0xfd, 0x1e, 0xad, 0xf, 0xa9, 0x59, 0x37, 0xd3, 0x89, 0x35, 0xc, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xf2, 0x58, 0xa3, 0x81, 0xc4, 0x0, 0x5e, 0xab, 0xfb, 0xfb, 0x2b, 0x1d, 0x62, 0x1e, 0xd0, 0xe6, 0x90, 0x11, 0xfd, 0x7c, 0x7, 0xfa, 0x5a, 0x86, 0x2b, 0x3, 0x83, 0x2f, 0x61, 0xf0, 0xc5, 0x24, 0xa8, 0xf6, 0x66, 0xc9, 0x69, 0x46, 0x22, 0x1, 0x45, 0x44, 0xdb, 0x93, 0xbd, 0x69, 0xec, 0x43, 0xe1, 0x31, 0x97, 0x93, 0x82, 0x1f, 0x41, 0x9b, 0x5f, 0xd1, 0xc6, 0x25, 0x1e, 0x99, 0x7d, 0x8, 0x1, 0x0, 0x1, 0x3, 0xfa, 0x91, 0x9e, 0xb2, 0xa8, 0x38, 0x77, 0xd5, 0xb0, 0x94, 0xcd, 0x5d, 0x7e, 0xab, 0x26, 0x74, 0x9d, 0x15, 0x52, 0x61, 0x54, 0xa1, 0xfc, 0x9c, 0x37, 0x68, 0xff, 0xde, 0x5e, 0x8e, 0x49, 0xe5, 0x50, 0xf8, 0xe9, 0x32, 0xe5, 0xba, 0x1b, 0x1, 0x20, 0x78, 0x97, 0x7c, 0x85, 0xb0, 0xeb, 0xb4, 0x5d, 0x50, 0xe0, 0x91, 0x1f, 0x6c, 0xa4, 0xbd, 0x6d, 0xf4, 0xcd, 0xa6, 0x31, 0x63, 0x6, 0xe6, 0x7, 0x61, 0x48, 0x1d, 0x35, 0x74, 0x74, 0xbb, 0x7c, 0x4d, 0x76, 0x24, 0xeb, 0xd3, 0xbd, 0xb3, 0xd8, 0x35, 0x5e, 0x73, 0xd1, 0x10, 0x43, 0xfc, 0xd, 0xa3, 0x53, 0x80, 0x0, 0x0, 0x0, 0x0, 0xd5, 0xc, 0xaa, 0xce, 0x71, 0xae, 0x77, 0xf0, 0xd9, 0x63, 0x86, 0x33, 0xe0, 0x80, 0x63, 0xd9, 0x42, 0xe6, 0x27, 0x7a, 0x2, 0x6d, 0xe8, 0x2a, 0xc, 0xa8, 0xaf, 0x65, 0x79, 0xf5, 0x3e, 0xd7, 0x1, 0x2, 0x2, 0x1, 0x0, 0x74, 0xc, 0x0, 0x0, 0x0, 0x55, 0x1c, 0x1b, 0x13, 0x0, 0x0, 0x0, 0x0, 0x1f, 0x1, 0x1f, 0x1, 0x1e, 0x1, 0x1d, 0x1, 0x1c, 0x1, 0x1b, 0x1, 0x1a, 0x1, 0x19, 0x1, 0x18, 0x1, 0x17, 0x1, 0x16, 0x1, 0x15, 0x1, 0x14, 0x1, 0x13, 0x1, 0x12, 0x1, 0x11, 0x1, 0x10, 0x1, 0xf, 0x1, 0xe, 0x1, 0xd, 0x1, 0xc, 0x1, 0xb, 0x1, 0xa, 0x1, 0x9, 0x1, 0x8, 0x1, 0x7, 0x1, 0x6}, MerklePath: [][20]uint8{{0x51, 0x82, 0x56, 0x5, 0x4a, 0x1d, 0xd6, 0x8a, 0xaf, 0xd5, 0x70, 0xee, 0xd1, 0x49, 0x8a, 0x2d, 0xc9, 0x95, 0x5c, 0x10}, {0x9b, 0x90, 0xe1, 0xf7, 0x7e, 0xdb, 0x99, 0x6, 0x45, 0x16, 0x94, 0xe3, 0x5a, 0xdd, 0xf, 0xa9, 0x59, 0xf, 0x94, 0x6f}, {0xa, 0x2c, 0x50, 0xa3, 0x64, 0x11, 0x34, 0xc6, 0x84, 0xd2, 0x24, 0x1b, 0x21, 0xb9, 0x19, 0x78, 0x2a, 0x30, 0x69, 0xc1}, {0x60, 0x64, 0x59, 0xb0, 0xcb, 0x63, 0xa8, 0x60, 0xa1, 0xa5, 0xec, 0x88, 0x64, 0x19, 0xe9, 0x88, 0xa4, 0x83, 0x41, 0xda}, {0x9d, 0x53, 0x86, 0xb2, 0x1e, 0xc4, 0xb1, 0xce, 0xd2, 0x6f, 0x1f, 0x93, 0xdd, 0x0, 0x69, 0xf5, 0x81, 0x43, 0xec, 0x17}, {0x6d, 0x3d, 0x4f, 0x6a, 0x9a, 0x12, 0x3b, 0x63, 0x8a, 0x7f, 0xa9, 0xea, 0x10, 0x7c, 0xf7, 0x4e, 0x50, 0x6, 0xf8, 0x11}}},
		},
		{
			Raw:    []byte{80, 45, 56, 117, 220, 107, 107, 123, 165, 225, 251, 20, 60, 0, 7, 172, 50, 126, 209, 208, 201, 101, 92, 139, 76, 162, 139, 157, 115, 241, 231, 44, 33, 219, 37, 1, 154, 102, 49, 129, 64, 176, 109, 165, 236, 24, 15, 110, 130, 11, 19, 194, 31, 177, 247, 38, 8, 155, 114, 144, 116, 155, 40, 0, 135, 113, 28, 27, 19, 0, 0, 0, 0, 11, 0, 0, 0, 173, 195, 0, 0, 0, 0, 1, 0, 4, 39, 4, 42, 231, 189, 121, 15, 130, 203, 20, 113, 235, 215, 254, 203, 63, 149, 134, 115, 15, 154, 149, 150, 253, 31, 113, 239, 152, 120, 66, 176, 134, 207, 168, 41, 17, 164, 12, 98, 78, 29, 0, 132, 245, 151, 80, 229, 45, 142, 213, 67, 14, 206, 247, 41, 184, 254, 134, 214, 114, 80, 154, 38, 23, 187, 61, 60, 93, 99, 167, 210, 124, 143, 35, 62, 132, 70, 63, 219, 164, 105, 100, 231, 25, 204, 19, 136, 201, 160, 6, 193, 16, 5, 16, 114, 24, 174, 169, 156, 66, 208, 104, 192, 84, 17, 19, 0, 88, 251, 35, 237, 96, 58, 30, 178, 21, 178, 255, 139, 101, 216, 89, 75, 191, 45, 150, 159, 95, 243, 80, 139, 48, 92, 255, 24, 38, 158, 108, 28, 37, 140, 28, 198, 90, 248, 238, 227, 108, 144, 183, 129, 242, 23, 30, 186, 175, 117, 126, 109, 165, 147, 23, 224, 61, 191, 229, 197, 77, 241, 78, 255, 0, 44, 166, 211, 99, 243, 56, 80, 165, 68, 89, 203, 222, 238, 220, 1, 52, 123, 211, 225, 185, 146, 53, 211, 85, 222, 230, 112, 101, 151, 255, 148, 215, 93, 99, 191, 139, 118, 170, 152, 93, 149, 253, 28, 40, 4, 153, 30, 121, 17, 98, 55, 69, 154, 17, 9, 117, 245, 119, 203, 88, 134, 212, 214, 54, 1, 7, 0, 5, 2, 64, 13, 3, 0, 65, 12, 0, 0, 0, 0, 0, 0, 215, 39, 61, 18, 196, 98, 162, 254, 136, 193, 71, 172, 174, 70, 48, 255, 131, 211, 111, 216, 116, 140, 164, 45, 62, 56, 193, 161, 196, 83, 225, 100, 1, 0, 0, 0, 0, 0, 0, 0, 1, 230, 84, 223, 138, 234, 103, 216, 3, 80, 230, 167, 145, 73, 239, 39, 214, 67, 191, 10, 206, 133, 210, 25, 72, 139, 201, 21, 208, 128, 85, 248, 93, 210, 20, 55, 163, 152, 40, 211, 116, 207, 240, 243, 67, 217, 222, 76, 239, 172, 212, 70, 132, 225, 203, 168, 79, 140, 151, 176, 171, 140, 140, 96, 5, 128, 1, 0, 5, 14, 5, 74, 213, 162, 67, 31, 56, 236, 54, 188, 98, 81, 157, 29, 163, 13, 35, 190, 1, 118, 130, 134, 130, 45, 227, 32, 198, 29, 164, 103, 51, 91, 22, 95, 149, 114, 197, 169, 106, 165, 2, 221, 81, 16, 84, 162, 106, 109, 37, 142, 247, 193, 214, 214, 193, 174, 225, 41, 25, 20, 220, 81, 2, 50, 31, 171, 43, 44, 104, 103, 161, 158, 115, 43, 33, 178, 124, 191, 161, 151, 158, 242, 156, 59, 15, 174, 43, 57, 199, 176, 146, 8, 193, 113, 247, 127, 34, 224, 240, 253, 235, 106, 65, 23, 162, 145, 207, 167, 241, 43, 196, 74, 14, 18, 186, 192, 154, 217, 71, 255, 70, 75, 17, 251, 57, 207, 60, 157, 111, 81, 179, 87, 211, 117, 183, 195, 191, 32, 226, 216, 174, 31, 180, 244, 149, 202, 151, 51, 180, 171, 115, 35, 228, 233, 147, 33, 213, 131, 27, 25, 170, 89, 67, 81, 216, 218, 58, 81, 203, 218, 42, 103, 227, 192, 233, 227, 151, 98, 214, 234, 30, 237, 76, 186, 36, 239, 48, 14, 84, 244, 189, 104, 178, 54, 144, 215, 208, 117, 141, 29, 93, 139, 137, 80, 206, 199, 169, 180, 215, 199, 154, 232, 255, 181, 198, 186, 13, 189, 98, 161, 152, 55, 147, 91, 187, 49, 161, 200, 95, 172, 188, 240, 136, 115, 249, 41, 193, 132, 164, 61, 129, 179, 173, 210, 58, 114, 176, 65, 196, 243, 76, 62, 154, 190, 207, 93, 200, 77, 242, 67, 56, 152, 59, 228, 168, 91, 48, 151, 186, 244, 11, 201, 87, 17, 8, 210, 137, 172, 0, 179, 104, 223, 23, 93, 68, 117, 207, 122, 3, 6, 70, 111, 229, 33, 23, 50, 255, 236, 173, 186, 114, 195, 155, 231, 188, 140, 229, 187, 197, 247, 18, 107, 44, 67, 155, 58, 64, 0, 0, 0, 6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235, 121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133, 126, 255, 0, 169, 14, 3, 104, 95, 142, 144, 144, 83, 228, 88, 18, 28, 102, 245, 167, 106, 237, 199, 112, 106, 161, 28, 130, 248, 170, 149, 42, 143, 43, 120, 121, 169, 75, 216, 124, 111, 59, 12, 231, 105, 114, 50, 175, 174, 162, 142, 57, 231, 19, 144, 200, 31, 189, 110, 189, 107, 35, 69, 34, 71, 128, 97, 120, 112, 219, 225, 76, 43, 166, 1, 61, 123, 101, 92, 94, 16, 61, 54, 58, 172, 71, 190, 135, 25, 1, 164, 42, 6, 43, 181, 9, 187, 144, 71, 80, 174, 197, 186, 12, 25, 132, 135, 164, 123, 119, 20, 117, 96, 101, 227, 208, 142, 27, 136, 25, 123, 192, 147, 113, 188, 227, 56, 150, 188, 175, 186, 223, 17, 4, 9, 0, 5, 2, 202, 240, 0, 0, 11, 11, 10, 0, 6, 5, 8, 4, 1, 7, 3, 2, 13, 42, 248, 198, 158, 145, 225, 117, 135, 200, 160, 198, 42, 28, 2, 0, 0, 0, 166, 65, 224, 196, 10, 0, 0, 0, 175, 51, 27, 168, 50, 127, 187, 53, 177, 196, 254, 255, 0, 0, 0, 0, 1, 0, 12, 0, 9, 0, 114, 28, 27, 19, 0, 0, 0, 0, 9, 0, 9, 3, 195, 128, 17, 0, 0, 0, 0, 0, 0, 1, 6, 0, 0, 0, 0, 0, 0, 22, 176, 190, 138, 220, 130, 182, 0, 20, 52, 247, 252, 250, 175, 30, 207, 36, 214, 103, 105, 2, 61, 5, 173, 22, 203, 240, 98, 152, 156, 198, 169, 1, 0, 0, 0, 205, 193, 250, 0, 95, 169, 200, 241, 189, 113, 130, 16, 247, 148, 212, 35, 62, 137, 4, 239, 56, 120, 175, 91, 163, 132, 85, 20, 239, 16, 67, 133, 199, 159, 77, 143, 154, 131, 223, 183, 129, 233, 114, 11, 163, 197, 193, 66, 205, 135, 238, 189, 110, 49, 44, 157, 216, 126, 4, 238, 192, 67, 31, 197, 229, 228, 10, 105, 8, 2, 72, 246, 249, 168, 114, 98, 91, 163, 129, 179, 40, 11, 117, 238, 198, 116, 76, 57, 185, 138, 217, 251, 31, 175, 174, 207, 245, 31, 44, 204, 43, 148, 57, 131, 233, 213, 131, 227, 49, 141, 13, 93, 128, 185, 59, 72, 47, 253, 136, 183, 220, 171, 247, 224, 141, 252, 5, 46, 224, 72, 182, 158, 183, 184, 4, 112, 204, 35, 131, 226},
			Parsed: shred.Shred{CommonHeader: shred.CommonHeader{Signature: solana.Signature{0x50, 0x2d, 0x38, 0x75, 0xdc, 0x6b, 0x6b, 0x7b, 0xa5, 0xe1, 0xfb, 0x14, 0x3c, 0x0, 0x7, 0xac, 0x32, 0x7e, 0xd1, 0xd0, 0xc9, 0x65, 0x5c, 0x8b, 0x4c, 0xa2, 0x8b, 0x9d, 0x73, 0xf1, 0xe7, 0x2c, 0x21, 0xdb, 0x25, 0x1, 0x9a, 0x66, 0x31, 0x81, 0x40, 0xb0, 0x6d, 0xa5, 0xec, 0x18, 0xf, 0x6e, 0x82, 0xb, 0x13, 0xc2, 0x1f, 0xb1, 0xf7, 0x26, 0x8, 0x9b, 0x72, 0x90, 0x74, 0x9b, 0x28, 0x0}, Variant: 0x87, Slot: 0x131b1c71, Index: 0xb, Version: 0xc3ad, FECSetIndex: 0x0}, DataHeader: shred.DataHeader{ParentOffset: 0x1, Flags: 0x4, Size: 0x427}, Payload: []uint8{0x2a, 0xe7, 0xbd, 0x79, 0xf, 0x82, 0xcb, 0x14, 0x71, 0xeb, 0xd7, 0xfe, 0xcb, 0x3f, 0x95, 0x86, 0x73, 0xf, 0x9a, 0x95, 0x96, 0xfd, 0x1f, 0x71, 0xef, 0x98, 0x78, 0x42, 0xb0, 0x86, 0xcf, 0xa8, 0x29, 0x11, 0xa4, 0xc, 0x62, 0x4e, 0x1d, 0x0, 0x84, 0xf5, 0x97, 0x50, 0xe5, 0x2d, 0x8e, 0xd5, 0x43, 0xe, 0xce, 0xf7, 0x29, 0xb8, 0xfe, 0x86, 0xd6, 0x72, 0x50, 0x9a, 0x26, 0x17, 0xbb, 0x3d, 0x3c, 0x5d, 0x63, 0xa7, 0xd2, 0x7c, 0x8f, 0x23, 0x3e, 0x84, 0x46, 0x3f, 0xdb, 0xa4, 0x69, 0x64, 0xe7, 0x19, 0xcc, 0x13, 0x88, 0xc9, 0xa0, 0x6, 0xc1, 0x10, 0x5, 0x10, 0x72, 0x18, 0xae, 0xa9, 0x9c, 0x42, 0xd0, 0x68, 0xc0, 0x54, 0x11, 0x13, 0x0, 0x58, 0xfb, 0x23, 0xed, 0x60, 0x3a, 0x1e, 0xb2, 0x15, 0xb2, 0xff, 0x8b, 0x65, 0xd8, 0x59, 0x4b, 0xbf, 0x2d, 0x96, 0x9f, 0x5f, 0xf3, 0x50, 0x8b, 0x30, 0x5c, 0xff, 0x18, 0x26, 0x9e, 0x6c, 0x1c, 0x25, 0x8c, 0x1c, 0xc6, 0x5a, 0xf8, 0xee, 0xe3, 0x6c, 0x90, 0xb7, 0x81, 0xf2, 0x17, 0x1e, 0xba, 0xaf, 0x75, 0x7e, 0x6d, 0xa5, 0x93, 0x17, 0xe0, 0x3d, 0xbf, 0xe5, 0xc5, 0x4d, 0xf1, 0x4e, 0xff, 0x0, 0x2c, 0xa6, 0xd3, 0x63, 0xf3, 0x38, 0x50, 0xa5, 0x44, 0x59, 0xcb, 0xde, 0xee, 0xdc, 0x1, 0x34, 0x7b, 0xd3, 0xe1, 0xb9, 0x92, 0x35, 0xd3, 0x55, 0xde, 0xe6, 0x70, 0x65, 0x97, 0xff, 0x94, 0xd7, 0x5d, 0x63, 0xbf, 0x8b, 0x76, 0xaa, 0x98, 0x5d, 0x95, 0xfd, 0x1c, 0x28, 0x4, 0x99, 0x1e, 0x79, 0x11, 0x62, 0x37, 0x45, 0x9a, 0x11, 0x9, 0x75, 0xf5, 0x77, 0xcb, 0x58, 0x86, 0xd4, 0xd6, 0x36, 0x1, 0x7, 0x0, 0x5, 0x2, 0x40, 0xd, 0x3, 0x0, 0x41, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd7, 0x27, 0x3d, 0x12, 0xc4, 0x62, 0xa2, 0xfe, 0x88, 0xc1, 0x47, 0xac, 0xae, 0x46, 0x30, 0xff, 0x83, 0xd3, 0x6f, 0xd8, 0x74, 0x8c, 0xa4, 0x2d, 0x3e, 0x38, 0xc1, 0xa1, 0xc4, 0x53, 0xe1, 0x64, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xe6, 0x54, 0xdf, 0x8a, 0xea, 0x67, 0xd8, 0x3, 0x50, 0xe6, 0xa7, 0x91, 0x49, 0xef, 0x27, 0xd6, 0x43, 0xbf, 0xa, 0xce, 0x85, 0xd2, 0x19, 0x48, 0x8b, 0xc9, 0x15, 0xd0, 0x80, 0x55, 0xf8, 0x5d, 0xd2, 0x14, 0x37, 0xa3, 0x98, 0x28, 0xd3, 0x74, 0xcf, 0xf0, 0xf3, 0x43, 0xd9, 0xde, 0x4c, 0xef, 0xac, 0xd4, 0x46, 0x84, 0xe1, 0xcb, 0xa8, 0x4f, 0x8c, 0x97, 0xb0, 0xab, 0x8c, 0x8c, 0x60, 0x5, 0x80, 0x1, 0x0, 0x5, 0xe, 0x5, 0x4a, 0xd5, 0xa2, 0x43, 0x1f, 0x38, 0xec, 0x36, 0xbc, 0x62, 0x51, 0x9d, 0x1d, 0xa3, 0xd, 0x23, 0xbe, 0x1, 0x76, 0x82, 0x86, 0x82, 0x2d, 0xe3, 0x20, 0xc6, 0x1d, 0xa4, 0x67, 0x33, 0x5b, 0x16, 0x5f, 0x95, 0x72, 0xc5, 0xa9, 0x6a, 0xa5, 0x2, 0xdd, 0x51, 0x10, 0x54, 0xa2, 0x6a, 0x6d, 0x25, 0x8e, 0xf7, 0xc1, 0xd6, 0xd6, 0xc1, 0xae, 0xe1, 0x29, 0x19, 0x14, 0xdc, 0x51, 0x2, 0x32, 0x1f, 0xab, 0x2b, 0x2c, 0x68, 0x67, 0xa1, 0x9e, 0x73, 0x2b, 0x21, 0xb2, 0x7c, 0xbf, 0xa1, 0x97, 0x9e, 0xf2, 0x9c, 0x3b, 0xf, 0xae, 0x2b, 0x39, 0xc7, 0xb0, 0x92, 0x8, 0xc1, 0x71, 0xf7, 0x7f, 0x22, 0xe0, 0xf0, 0xfd, 0xeb, 0x6a, 0x41, 0x17, 0xa2, 0x91, 0xcf, 0xa7, 0xf1, 0x2b, 0xc4, 0x4a, 0xe, 0x12, 0xba, 0xc0, 0x9a, 0xd9, 0x47, 0xff, 0x46, 0x4b, 0x11, 0xfb, 0x39, 0xcf, 0x3c, 0x9d, 0x6f, 0x51, 0xb3, 0x57, 0xd3, 0x75, 0xb7, 0xc3, 0xbf, 0x20, 0xe2, 0xd8, 0xae, 0x1f, 0xb4, 0xf4, 0x95, 0xca, 0x97, 0x33, 0xb4, 0xab, 0x73, 0x23, 0xe4, 0xe9, 0x93, 0x21, 0xd5, 0x83, 0x1b, 0x19, 0xaa, 0x59, 0x43, 0x51, 0xd8, 0xda, 0x3a, 0x51, 0xcb, 0xda, 0x2a, 0x67, 0xe3, 0xc0, 0xe9, 0xe3, 0x97, 0x62, 0xd6, 0xea, 0x1e, 0xed, 0x4c, 0xba, 0x24, 0xef, 0x30, 0xe, 0x54, 0xf4, 0xbd, 0x68, 0xb2, 0x36, 0x90, 0xd7, 0xd0, 0x75, 0x8d, 0x1d, 0x5d, 0x8b, 0x89, 0x50, 0xce, 0xc7, 0xa9, 0xb4, 0xd7, 0xc7, 0x9a, 0xe8, 0xff, 0xb5, 0xc6, 0xba, 0xd, 0xbd, 0x62, 0xa1, 0x98, 0x37, 0x93, 0x5b, 0xbb, 0x31, 0xa1, 0xc8, 0x5f, 0xac, 0xbc, 0xf0, 0x88, 0x73, 0xf9, 0x29, 0xc1, 0x84, 0xa4, 0x3d, 0x81, 0xb3, 0xad, 0xd2, 0x3a, 0x72, 0xb0, 0x41, 0xc4, 0xf3, 0x4c, 0x3e, 0x9a, 0xbe, 0xcf, 0x5d, 0xc8, 0x4d, 0xf2, 0x43, 0x38, 0x98, 0x3b, 0xe4, 0xa8, 0x5b, 0x30, 0x97, 0xba, 0xf4, 0xb, 0xc9, 0x57, 0x11, 0x8, 0xd2, 0x89, 0xac, 0x0, 0xb3, 0x68, 0xdf, 0x17, 0x5d, 0x44, 0x75, 0xcf, 0x7a, 0x3, 0x6, 0x46, 0x6f, 0xe5, 0x21, 0x17, 0x32, 0xff, 0xec, 0xad, 0xba, 0x72, 0xc3, 0x9b, 0xe7, 0xbc, 0x8c, 0xe5, 0xbb, 0xc5, 0xf7, 0x12, 0x6b, 0x2c, 0x43, 0x9b, 0x3a, 0x40, 0x0, 0x0, 0x0, 0x6, 0xdd, 0xf6, 0xe1, 0xd7, 0x65, 0xa1, 0x93, 0xd9, 0xcb, 0xe1, 0x46, 0xce, 0xeb, 0x79, 0xac, 0x1c, 0xb4, 0x85, 0xed, 0x5f, 0x5b, 0x37, 0x91, 0x3a, 0x8c, 0xf5, 0x85, 0x7e, 0xff, 0x0, 0xa9, 0xe, 0x3, 0x68, 0x5f, 0x8e, 0x90, 0x90, 0x53, 0xe4, 0x58, 0x12, 0x1c, 0x66, 0xf5, 0xa7, 0x6a, 0xed, 0xc7, 0x70, 0x6a, 0xa1, 0x1c, 0x82, 0xf8, 0xaa, 0x95, 0x2a, 0x8f, 0x2b, 0x78, 0x79, 0xa9, 0x4b, 0xd8, 0x7c, 0x6f, 0x3b, 0xc, 0xe7, 0x69, 0x72, 0x32, 0xaf, 0xae, 0xa2, 0x8e, 0x39, 0xe7, 0x13, 0x90, 0xc8, 0x1f, 0xbd, 0x6e, 0xbd, 0x6b, 0x23, 0x45, 0x22, 0x47, 0x80, 0x61, 0x78, 0x70, 0xdb, 0xe1, 0x4c, 0x2b, 0xa6, 0x1, 0x3d, 0x7b, 0x65, 0x5c, 0x5e, 0x10, 0x3d, 0x36, 0x3a, 0xac, 0x47, 0xbe, 0x87, 0x19, 0x1, 0xa4, 0x2a, 0x6, 0x2b, 0xb5, 0x9, 0xbb, 0x90, 0x47, 0x50, 0xae, 0xc5, 0xba, 0xc, 0x19, 0x84, 0x87, 0xa4, 0x7b, 0x77, 0x14, 0x75, 0x60, 0x65, 0xe3, 0xd0, 0x8e, 0x1b, 0x88, 0x19, 0x7b, 0xc0, 0x93, 0x71, 0xbc, 0xe3, 0x38, 0x96, 0xbc, 0xaf, 0xba, 0xdf, 0x11, 0x4, 0x9, 0x0, 0x5, 0x2, 0xca, 0xf0, 0x0, 0x0, 0xb, 0xb, 0xa, 0x0, 0x6, 0x5, 0x8, 0x4, 0x1, 0x7, 0x3, 0x2, 0xd, 0x2a, 0xf8, 0xc6, 0x9e, 0x91, 0xe1, 0x75, 0x87, 0xc8, 0xa0, 0xc6, 0x2a, 0x1c, 0x2, 0x0, 0x0, 0x0, 0xa6, 0x41, 0xe0, 0xc4, 0xa, 0x0, 0x0, 0x0, 0xaf, 0x33, 0x1b, 0xa8, 0x32, 0x7f, 0xbb, 0x35, 0xb1, 0xc4, 0xfe, 0xff, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0xc, 0x0, 0x9, 0x0, 0x72, 0x1c, 0x1b, 0x13, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x9, 0x3, 0xc3, 0x80, 0x11, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x16, 0xb0, 0xbe, 0x8a, 0xdc, 0x82, 0xb6, 0x0, 0x14, 0x34, 0xf7, 0xfc, 0xfa, 0xaf, 0x1e, 0xcf, 0x24, 0xd6, 0x67, 0x69, 0x2, 0x3d, 0x5, 0xad, 0x16, 0xcb, 0xf0, 0x62, 0x98, 0x9c, 0xc6, 0xa9, 0x1, 0x0, 0x0, 0x0}, MerklePath: [][20]uint8{{0xcd, 0xc1, 0xfa, 0x0, 0x5f, 0xa9, 0xc8, 0xf1, 0xbd, 0x71, 0x82, 0x10, 0xf7, 0x94, 0xd4, 0x23, 0x3e, 0x89, 0x4, 0xef}, {0x38, 0x78, 0xaf, 0x5b, 0xa3, 0x84, 0x55, 0x14, 0xef, 0x10, 0x43, 0x85, 0xc7, 0x9f, 0x4d, 0x8f, 0x9a, 0x83, 0xdf, 0xb7}, {0x81, 0xe9, 0x72, 0xb, 0xa3, 0xc5, 0xc1, 0x42, 0xcd, 0x87, 0xee, 0xbd, 0x6e, 0x31, 0x2c, 0x9d, 0xd8, 0x7e, 0x4, 0xee}, {0xc0, 0x43, 0x1f, 0xc5, 0xe5, 0xe4, 0xa, 0x69, 0x8, 0x2, 0x48, 0xf6, 0xf9, 0xa8, 0x72, 0x62, 0x5b, 0xa3, 0x81, 0xb3}, {0x28, 0xb, 0x75, 0xee, 0xc6, 0x74, 0x4c, 0x39, 0xb9, 0x8a, 0xd9, 0xfb, 0x1f, 0xaf, 0xae, 0xcf, 0xf5, 0x1f, 0x2c, 0xcc}, {0x2b, 0x94, 0x39, 0x83, 0xe9, 0xd5, 0x83, 0xe3, 0x31, 0x8d, 0xd, 0x5d, 0x80, 0xb9, 0x3b, 0x48, 0x2f, 0xfd, 0x88, 0xb7}, {0xdc, 0xab, 0xf7, 0xe0, 0x8d, 0xfc, 0x5, 0x2e, 0xe0, 0x48, 0xb6, 0x9e, 0xb7, 0xb8, 0x4, 0x70, 0xcc, 0x23, 0x83, 0xe2}}},
		},
		{
			Raw:    []byte{60, 249, 141, 159, 238, 144, 24, 191, 219, 119, 245, 161, 159, 153, 206, 29, 254, 143, 245, 43, 165, 134, 131, 171, 25, 74, 183, 184, 193, 178, 229, 158, 149, 61, 192, 29, 89, 77, 83, 252, 64, 102, 213, 127, 242, 90, 37, 153, 52, 249, 250, 65, 119, 106, 232, 13, 154, 246, 97, 217, 131, 147, 155, 15, 151, 107, 28, 27, 19, 0, 0, 0, 0, 0, 0, 0, 0, 173, 195, 0, 0, 0, 0, 1, 0, 3, 7, 4, 38, 0, 0, 0, 0, 0, 0, 0, 129, 46, 0, 0, 0, 0, 0, 0, 99, 130, 212, 133, 95, 83, 234, 215, 194, 148, 254, 225, 247, 112, 10, 183, 140, 211, 8, 50, 210, 177, 135, 221, 177, 166, 238, 74, 151, 146, 198, 25, 1, 0, 0, 0, 0, 0, 0, 0, 1, 146, 206, 152, 0, 176, 138, 134, 128, 178, 186, 211, 45, 145, 116, 174, 182, 100, 226, 91, 52, 245, 102, 59, 10, 87, 255, 222, 244, 252, 251, 97, 78, 224, 187, 92, 85, 95, 45, 201, 51, 174, 206, 67, 255, 22, 168, 98, 162, 57, 146, 250, 78, 108, 205, 59, 87, 94, 20, 3, 39, 250, 5, 122, 2, 1, 0, 3, 5, 11, 227, 42, 234, 252, 101, 220, 201, 146, 104, 34, 187, 148, 75, 226, 46, 33, 55, 234, 4, 82, 50, 169, 165, 206, 245, 114, 3, 160, 219, 149, 2, 32, 44, 86, 157, 96, 74, 195, 224, 124, 42, 160, 161, 118, 171, 102, 21, 65, 83, 105, 246, 86, 61, 21, 18, 169, 56, 3, 113, 207, 175, 41, 105, 3, 6, 70, 111, 229, 33, 23, 50, 255, 236, 173, 186, 114, 195, 155, 231, 188, 140, 229, 187, 197, 247, 18, 107, 44, 67, 155, 58, 64, 0, 0, 0, 6, 155, 232, 110, 201, 175, 101, 235, 74, 97, 79, 217, 155, 142, 146, 84, 125, 160, 20, 95, 171, 94, 128, 74, 219, 89, 77, 179, 231, 58, 39, 27, 29, 56, 191, 42, 163, 142, 163, 123, 174, 191, 211, 86, 185, 90, 65, 116, 100, 220, 9, 99, 249, 199, 151, 55, 173, 213, 71, 77, 20, 14, 210, 8, 100, 61, 115, 255, 116, 79, 90, 29, 172, 129, 132, 169, 199, 109, 12, 253, 115, 56, 26, 37, 229, 112, 208, 48, 123, 246, 64, 30, 62, 226, 207, 239, 3, 2, 0, 5, 2, 40, 35, 0, 0, 2, 0, 9, 3, 0, 53, 12, 0, 0, 0, 0, 0, 3, 3, 0, 4, 1, 153, 1, 6, 248, 255, 255, 255, 255, 255, 255, 255, 183, 8, 105, 102, 0, 0, 0, 0, 105, 28, 27, 19, 0, 0, 0, 0, 200, 96, 40, 3, 149, 1, 0, 0, 232, 3, 0, 0, 0, 0, 0, 0, 49, 29, 27, 19, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 193, 28, 0, 0, 0, 0, 0, 0, 8, 72, 231, 62, 157, 114, 237, 98, 97, 114, 136, 168, 209, 116, 235, 87, 194, 34, 63, 132, 171, 223, 61, 175, 26, 50, 168, 121, 11, 166, 247, 23, 3, 0, 0, 0, 0, 0, 0, 0, 1, 110, 145, 92, 169, 134, 76, 236, 23, 211, 14, 67, 63, 77, 145, 127, 44, 7, 20, 186, 207, 36, 38, 144, 36, 79, 150, 171, 11, 59, 219, 174, 248, 138, 70, 179, 172, 44, 108, 131, 25, 46, 255, 84, 186, 30, 233, 191, 37, 142, 126, 78, 246, 83, 172, 157, 157, 64, 163, 1, 83, 43, 84, 62, 6, 1, 0, 1, 3, 199, 215, 172, 96, 255, 34, 238, 3, 27, 239, 158, 108, 56, 13, 17, 194, 96, 38, 24, 194, 109, 240, 129, 82, 241, 49, 156, 15, 53, 211, 212, 175, 68, 159, 79, 43, 22, 155, 218, 81, 15, 171, 240, 7, 80, 14, 24, 81, 29, 236, 111, 39, 77, 216, 234, 175, 118, 63, 233, 67, 229, 83, 226, 240, 7, 97, 72, 29, 53, 116, 116, 187, 124, 77, 118, 36, 235, 211, 189, 179, 216, 53, 94, 115, 209, 16, 67, 252, 13, 163, 83, 128, 0, 0, 0, 0, 99, 33, 82, 104, 29, 87, 68, 119, 151, 67, 1, 179, 107, 117, 222, 17, 100, 160, 4, 114, 253, 162, 180, 211, 200, 58, 60, 205, 91, 201, 165, 127, 1, 2, 2, 1, 0, 116, 12, 0, 0, 0, 74, 28, 27, 19, 0, 0, 0, 0, 31, 1, 31, 1, 30, 1, 29, 1, 28, 1, 27, 1, 26, 1, 25, 1, 24, 1, 23, 1, 22, 1, 21, 1, 20, 1, 19, 1, 18, 1, 17, 1, 16, 1, 15, 1, 14, 1, 13, 1, 12, 1, 11, 1, 10, 1, 9, 1, 8, 1, 7, 1, 6, 1, 5, 1, 4, 1, 3, 1, 2, 1, 1, 216, 101, 104, 79, 68, 225, 137, 234, 94, 42, 228, 192, 216, 181, 218, 16, 197, 151, 205, 80, 123, 185, 213, 227, 55, 168, 236, 145, 237, 166, 9, 34, 1, 108, 227, 174, 103, 0, 0, 0, 0, 1, 229, 7, 147, 149, 69, 184, 153, 63, 193, 214, 153, 101, 102, 91, 237, 86, 51, 148, 94, 219, 54, 113, 162, 129, 228, 116, 136, 165, 199, 120, 116, 161, 123, 28, 22, 3, 59, 65, 100, 206, 187, 241, 195, 255, 156, 166, 129, 242, 145, 78, 194, 237, 232, 51, 21, 223, 40, 178, 41, 210, 252, 227, 152, 11, 1, 0, 1, 3, 35, 163, 243, 164, 101, 162, 74, 226, 162, 170, 17, 9, 173, 86, 70, 131, 236, 95, 104, 222, 17, 236, 122, 248, 5, 50, 16, 32, 60, 9, 17, 22, 138, 62, 57, 39, 10, 213, 27, 101, 2, 184, 25, 157, 162, 46, 141, 244, 122, 168, 23, 218, 101, 153, 111, 34, 60, 190, 74, 194, 232, 43, 109, 27, 253, 142, 216, 100, 163, 40, 20, 15, 185, 14, 88, 31, 235, 92, 103, 157, 147, 6, 136, 220, 130, 35, 162, 204, 23, 241, 155, 183, 145, 171, 109, 143, 203, 213, 14, 210, 199, 61, 201, 216, 69, 123, 227, 126, 141, 8, 5, 63, 16, 145, 105, 249, 149, 53, 52, 100, 147, 55, 67, 127, 1, 1, 70, 232, 66, 185, 249, 196, 239, 166, 176, 40, 120, 90, 128, 62, 86, 220, 4, 12, 31, 207, 164, 245, 114, 107, 154, 46, 218, 151, 153, 239, 185, 83, 41, 252, 182, 254, 76, 137, 187, 34, 153, 47, 249, 0, 117, 111, 98, 253, 157, 133, 19, 18, 86, 175, 190},
			Parsed: shred.Shred{CommonHeader: shred.CommonHeader{Signature: solana.Signature{0x3c, 0xf9, 0x8d, 0x9f, 0xee, 0x90, 0x18, 0xbf, 0xdb, 0x77, 0xf5, 0xa1, 0x9f, 0x99, 0xce, 0x1d, 0xfe, 0x8f, 0xf5, 0x2b, 0xa5, 0x86, 0x83, 0xab, 0x19, 0x4a, 0xb7, 0xb8, 0xc1, 0xb2, 0xe5, 0x9e, 0x95, 0x3d, 0xc0, 0x1d, 0x59, 0x4d, 0x53, 0xfc, 0x40, 0x66, 0xd5, 0x7f, 0xf2, 0x5a, 0x25, 0x99, 0x34, 0xf9, 0xfa, 0x41, 0x77, 0x6a, 0xe8, 0xd, 0x9a, 0xf6, 0x61, 0xd9, 0x83, 0x93, 0x9b, 0xf}, Variant: 0x97, Slot: 0x131b1c6b, Index: 0x0, Version: 0xc3ad, FECSetIndex: 0x0}, DataHeader: shred.DataHeader{ParentOffset: 0x1, Flags: 0x3, Size: 0x407}, Payload: []uint8{0x26, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x81, 0x2e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x63, 0x82, 0xd4, 0x85, 0x5f, 0x53, 0xea, 0xd7, 0xc2, 0x94, 0xfe, 0xe1, 0xf7, 0x70, 0xa, 0xb7, 0x8c, 0xd3, 0x8, 0x32, 0xd2, 0xb1, 0x87, 0xdd, 0xb1, 0xa6, 0xee, 0x4a, 0x97, 0x92, 0xc6, 0x19, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x92, 0xce, 0x98, 0x0, 0xb0, 0x8a, 0x86, 0x80, 0xb2, 0xba, 0xd3, 0x2d, 0x91, 0x74, 0xae, 0xb6, 0x64, 0xe2, 0x5b, 0x34, 0xf5, 0x66, 0x3b, 0xa, 0x57, 0xff, 0xde, 0xf4, 0xfc, 0xfb, 0x61, 0x4e, 0xe0, 0xbb, 0x5c, 0x55, 0x5f, 0x2d, 0xc9, 0x33, 0xae, 0xce, 0x43, 0xff, 0x16, 0xa8, 0x62, 0xa2, 0x39, 0x92, 0xfa, 0x4e, 0x6c, 0xcd, 0x3b, 0x57, 0x5e, 0x14, 0x3, 0x27, 0xfa, 0x5, 0x7a, 0x2, 0x1, 0x0, 0x3, 0x5, 0xb, 0xe3, 0x2a, 0xea, 0xfc, 0x65, 0xdc, 0xc9, 0x92, 0x68, 0x22, 0xbb, 0x94, 0x4b, 0xe2, 0x2e, 0x21, 0x37, 0xea, 0x4, 0x52, 0x32, 0xa9, 0xa5, 0xce, 0xf5, 0x72, 0x3, 0xa0, 0xdb, 0x95, 0x2, 0x20, 0x2c, 0x56, 0x9d, 0x60, 0x4a, 0xc3, 0xe0, 0x7c, 0x2a, 0xa0, 0xa1, 0x76, 0xab, 0x66, 0x15, 0x41, 0x53, 0x69, 0xf6, 0x56, 0x3d, 0x15, 0x12, 0xa9, 0x38, 0x3, 0x71, 0xcf, 0xaf, 0x29, 0x69, 0x3, 0x6, 0x46, 0x6f, 0xe5, 0x21, 0x17, 0x32, 0xff, 0xec, 0xad, 0xba, 0x72, 0xc3, 0x9b, 0xe7, 0xbc, 0x8c, 0xe5, 0xbb, 0xc5, 0xf7, 0x12, 0x6b, 0x2c, 0x43, 0x9b, 0x3a, 0x40, 0x0, 0x0, 0x0, 0x6, 0x9b, 0xe8, 0x6e, 0xc9, 0xaf, 0x65, 0xeb, 0x4a, 0x61, 0x4f, 0xd9, 0x9b, 0x8e, 0x92, 0x54, 0x7d, 0xa0, 0x14, 0x5f, 0xab, 0x5e, 0x80, 0x4a, 0xdb, 0x59, 0x4d, 0xb3, 0xe7, 0x3a, 0x27, 0x1b, 0x1d, 0x38, 0xbf, 0x2a, 0xa3, 0x8e, 0xa3, 0x7b, 0xae, 0xbf, 0xd3, 0x56, 0xb9, 0x5a, 0x41, 0x74, 0x64, 0xdc, 0x9, 0x63, 0xf9, 0xc7, 0x97, 0x37, 0xad, 0xd5, 0x47, 0x4d, 0x14, 0xe, 0xd2, 0x8, 0x64, 0x3d, 0x73, 0xff, 0x74, 0x4f, 0x5a, 0x1d, 0xac, 0x81, 0x84, 0xa9, 0xc7, 0x6d, 0xc, 0xfd, 0x73, 0x38, 0x1a, 0x25, 0xe5, 0x70, 0xd0, 0x30, 0x7b, 0xf6, 0x40, 0x1e, 0x3e, 0xe2, 0xcf, 0xef, 0x3, 0x2, 0x0, 0x5, 0x2, 0x28, 0x23, 0x0, 0x0, 0x2, 0x0, 0x9, 0x3, 0x0, 0x35, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x3, 0x0, 0x4, 0x1, 0x99, 0x1, 0x6, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb7, 0x8, 0x69, 0x66, 0x0, 0x0, 0x0, 0x0, 0x69, 0x1c, 0x1b, 0x13, 0x0, 0x0, 0x0, 0x0, 0xc8, 0x60, 0x28, 0x3, 0x95, 0x1, 0x0, 0x0, 0xe8, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x31, 0x1d, 0x1b, 0x13, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc1, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x48, 0xe7, 0x3e, 0x9d, 0x72, 0xed, 0x62, 0x61, 0x72, 0x88, 0xa8, 0xd1, 0x74, 0xeb, 0x57, 0xc2, 0x22, 0x3f, 0x84, 0xab, 0xdf, 0x3d, 0xaf, 0x1a, 0x32, 0xa8, 0x79, 0xb, 0xa6, 0xf7, 0x17, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x6e, 0x91, 0x5c, 0xa9, 0x86, 0x4c, 0xec, 0x17, 0xd3, 0xe, 0x43, 0x3f, 0x4d, 0x91, 0x7f, 0x2c, 0x7, 0x14, 0xba, 0xcf, 0x24, 0x26, 0x90, 0x24, 0x4f, 0x96, 0xab, 0xb, 0x3b, 0xdb, 0xae, 0xf8, 0x8a, 0x46, 0xb3, 0xac, 0x2c, 0x6c, 0x83, 0x19, 0x2e, 0xff, 0x54, 0xba, 0x1e, 0xe9, 0xbf, 0x25, 0x8e, 0x7e, 0x4e, 0xf6, 0x53, 0xac, 0x9d, 0x9d, 0x40, 0xa3, 0x1, 0x53, 0x2b, 0x54, 0x3e, 0x6, 0x1, 0x0, 0x1, 0x3, 0xc7, 0xd7, 0xac, 0x60, 0xff, 0x22, 0xee, 0x3, 0x1b, 0xef, 0x9e, 0x6c, 0x38, 0xd, 0x11, 0xc2, 0x60, 0x26, 0x18, 0xc2, 0x6d, 0xf0, 0x81, 0x52, 0xf1, 0x31, 0x9c, 0xf, 0x35, 0xd3, 0xd4, 0xaf, 0x44, 0x9f, 0x4f, 0x2b, 0x16, 0x9b, 0xda, 0x51, 0xf, 0xab, 0xf0, 0x7, 0x50, 0xe, 0x18, 0x51, 0x1d, 0xec, 0x6f, 0x27, 0x4d, 0xd8, 0xea, 0xaf, 0x76, 0x3f, 0xe9, 0x43, 0xe5, 0x53, 0xe2, 0xf0, 0x7, 0x61, 0x48, 0x1d, 0x35, 0x74, 0x74, 0xbb, 0x7c, 0x4d, 0x76, 0x24, 0xeb, 0xd3, 0xbd, 0xb3, 0xd8, 0x35, 0x5e, 0x73, 0xd1, 0x10, 0x43, 0xfc, 0xd, 0xa3, 0x53, 0x80, 0x0, 0x0, 0x0, 0x0, 0x63, 0x21, 0x52, 0x68, 0x1d, 0x57, 0x44, 0x77, 0x97, 0x43, 0x1, 0xb3, 0x6b, 0x75, 0xde, 0x11, 0x64, 0xa0, 0x4, 0x72, 0xfd, 0xa2, 0xb4, 0xd3, 0xc8, 0x3a, 0x3c, 0xcd, 0x5b, 0xc9, 0xa5, 0x7f, 0x1, 0x2, 0x2, 0x1, 0x0, 0x74, 0xc, 0x0, 0x0, 0x0, 0x4a, 0x1c, 0x1b, 0x13, 0x0, 0x0, 0x0, 0x0, 0x1f, 0x1, 0x1f, 0x1, 0x1e, 0x1, 0x1d, 0x1, 0x1c, 0x1, 0x1b, 0x1, 0x1a, 0x1, 0x19, 0x1, 0x18, 0x1, 0x17, 0x1, 0x16, 0x1, 0x15, 0x1, 0x14, 0x1, 0x13, 0x1, 0x12, 0x1, 0x11, 0x1, 0x10, 0x1, 0xf, 0x1, 0xe, 0x1, 0xd, 0x1, 0xc, 0x1, 0xb, 0x1, 0xa, 0x1, 0x9, 0x1, 0x8, 0x1, 0x7, 0x1, 0x6, 0x1, 0x5, 0x1, 0x4, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0xd8, 0x65, 0x68, 0x4f, 0x44, 0xe1, 0x89, 0xea, 0x5e, 0x2a, 0xe4, 0xc0, 0xd8, 0xb5, 0xda, 0x10, 0xc5, 0x97, 0xcd, 0x50, 0x7b, 0xb9, 0xd5, 0xe3, 0x37, 0xa8, 0xec, 0x91, 0xed, 0xa6, 0x9, 0x22, 0x1, 0x6c, 0xe3, 0xae, 0x67, 0x0, 0x0, 0x0, 0x0, 0x1, 0xe5, 0x7, 0x93, 0x95, 0x45, 0xb8, 0x99, 0x3f, 0xc1, 0xd6, 0x99, 0x65, 0x66, 0x5b, 0xed, 0x56, 0x33, 0x94, 0x5e, 0xdb, 0x36, 0x71, 0xa2, 0x81, 0xe4, 0x74, 0x88, 0xa5, 0xc7, 0x78, 0x74, 0xa1, 0x7b, 0x1c, 0x16, 0x3, 0x3b, 0x41, 0x64, 0xce, 0xbb, 0xf1, 0xc3, 0xff, 0x9c, 0xa6, 0x81, 0xf2, 0x91, 0x4e, 0xc2, 0xed, 0xe8, 0x33, 0x15, 0xdf, 0x28, 0xb2, 0x29, 0xd2, 0xfc, 0xe3, 0x98, 0xb, 0x1, 0x0, 0x1, 0x3, 0x23, 0xa3, 0xf3, 0xa4, 0x65, 0xa2, 0x4a, 0xe2, 0xa2}, MerklePath: [][20]uint8{{0xb8, 0x19, 0x9d, 0xa2, 0x2e, 0x8d, 0xf4, 0x7a, 0xa8, 0x17, 0xda, 0x65, 0x99, 0x6f, 0x22, 0x3c, 0xbe, 0x4a, 0xc2, 0xe8}, {0x2b, 0x6d, 0x1b, 0xfd, 0x8e, 0xd8, 0x64, 0xa3, 0x28, 0x14, 0xf, 0xb9, 0xe, 0x58, 0x1f, 0xeb, 0x5c, 0x67, 0x9d, 0x93}, {0x6, 0x88, 0xdc, 0x82, 0x23, 0xa2, 0xcc, 0x17, 0xf1, 0x9b, 0xb7, 0x91, 0xab, 0x6d, 0x8f, 0xcb, 0xd5, 0xe, 0xd2, 0xc7}, {0x3d, 0xc9, 0xd8, 0x45, 0x7b, 0xe3, 0x7e, 0x8d, 0x8, 0x5, 0x3f, 0x10, 0x91, 0x69, 0xf9, 0x95, 0x35, 0x34, 0x64, 0x93}, {0x37, 0x43, 0x7f, 0x1, 0x1, 0x46, 0xe8, 0x42, 0xb9, 0xf9, 0xc4, 0xef, 0xa6, 0xb0, 0x28, 0x78, 0x5a, 0x80, 0x3e, 0x56}, {0xdc, 0x4, 0xc, 0x1f, 0xcf, 0xa4, 0xf5, 0x72, 0x6b, 0x9a, 0x2e, 0xda, 0x97, 0x99, 0xef, 0xb9, 0x53, 0x29, 0xfc, 0xb6}, {0xfe, 0x4c, 0x89, 0xbb, 0x22, 0x99, 0x2f, 0xf9, 0x0, 0x75, 0x6f, 0x62, 0xfd, 0x9d, 0x85, 0x13, 0x12, 0x56, 0xaf, 0xbe}}},
		},
		{
			Raw: []byte{168, 209, 175, 47, 253, 179, 83, 190, 137, 135, 250, 13, 186, 10, 106, 194, 138, 149, 244, 82, 154, 143, 215, 102, 93, 87, 85, 230, 129, 254, 198, 248, 8, 168, 230, 91, 33, 74, 220, 176, 65, 50, 36, 232, 68, 102, 175, 55, 206, 240, 87, 138, 114, 43, 194, 83, 29, 134, 217, 22, 131, 162, 16, 12, 135, 103, 28, 27, 19, 0, 0, 0, 0, 116, 0, 0, 0, 173, 195, 80, 0, 0, 0, 1, 0, 72, 179, 0, 182, 189, 232, 121, 184, 104, 56, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 188, 75, 36, 78, 171, 3, 120, 128, 176, 156, 164, 183, 147, 135, 43, 174, 234, 188, 153, 81, 39, 186, 191, 175, 1, 59, 75, 150, 41, 33, 134, 159, 1, 2, 2, 0, 1, 12, 2, 0, 0, 0, 189, 223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 195, 222, 245, 119, 181, 46, 118, 17, 65, 61, 79, 179, 127, 14, 115, 108, 162, 247, 28, 15, 169, 115, 159, 229, 184, 58, 227, 77, 57, 221, 0, 239, 73, 110, 0, 106, 54, 118, 212, 220, 242, 222, 205, 166, 97, 191, 210, 11, 34, 106, 50, 12, 99, 221, 26, 91, 77, 3, 237, 225, 45, 138, 178, 14, 124, 145, 232, 104, 250, 55, 147, 4, 3, 144, 86, 207, 4, 208, 238, 163, 2, 208, 74, 7, 199, 60, 197, 147, 229, 163, 254, 165, 180, 12, 146, 90, 30, 187, 178, 135, 132, 86, 73, 30, 49, 51, 4, 190, 234, 53, 156, 252, 145, 8, 107, 217, 89, 41, 230, 162, 31, 148, 160, 227, 59, 9, 136, 95, 99, 40, 186, 174, 173, 247, 109, 141, 116, 69, 51, 121},
			Parsed: shred.Shred{
				CommonHeader: shred.CommonHeader{
					Signature:   solana.Signature{0xa8, 0xd1, 0xaf, 0x2f, 0xfd, 0xb3, 0x53, 0xbe, 0x89, 0x87, 0xfa, 0xd, 0xba, 0xa, 0x6a, 0xc2, 0x8a, 0x95, 0xf4, 0x52, 0x9a, 0x8f, 0xd7, 0x66, 0x5d, 0x57, 0x55, 0xe6, 0x81, 0xfe, 0xc6, 0xf8, 0x8, 0xa8, 0xe6, 0x5b, 0x21, 0x4a, 0xdc, 0xb0, 0x41, 0x32, 0x24, 0xe8, 0x44, 0x66, 0xaf, 0x37, 0xce, 0xf0, 0x57, 0x8a, 0x72, 0x2b, 0xc2, 0x53, 0x1d, 0x86, 0xd9, 0x16, 0x83, 0xa2, 0x10, 0xc},
					Variant:     0x87,
					Slot:        0x131b1c67,
					Index:       0x74,
					Version:     0xc3ad,
					FECSetIndex: 0x50,
				},
				DataHeader: shred.DataHeader{
					ParentOffset: 0x1,
					Flags:        0x48,
					Size:         0xb3,
				},
				Payload: []uint8{0xb6, 0xbd, 0xe8, 0x79, 0xb8, 0x68, 0x38, 0xd2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xbc, 0x4b, 0x24, 0x4e, 0xab, 0x3, 0x78, 0x80, 0xb0, 0x9c, 0xa4, 0xb7, 0x93, 0x87, 0x2b, 0xae, 0xea, 0xbc, 0x99, 0x51, 0x27, 0xba, 0xbf, 0xaf, 0x1, 0x3b, 0x4b, 0x96, 0x29, 0x21, 0x86, 0x9f, 0x1, 0x2, 0x2, 0x0, 0x1, 0xc, 0x2, 0x0, 0x0, 0x0, 0xbd, 0xdf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, MerklePath: [][20]uint8{{0xc3, 0xde, 0xf5, 0x77, 0xb5, 0x2e, 0x76, 0x11, 0x41, 0x3d, 0x4f, 0xb3, 0x7f, 0xe, 0x73, 0x6c, 0xa2, 0xf7, 0x1c, 0xf}, {0xa9, 0x73, 0x9f, 0xe5, 0xb8, 0x3a, 0xe3, 0x4d, 0x39, 0xdd, 0x0, 0xef, 0x49, 0x6e, 0x0, 0x6a, 0x36, 0x76, 0xd4, 0xdc}, {0xf2, 0xde, 0xcd, 0xa6, 0x61, 0xbf, 0xd2, 0xb, 0x22, 0x6a, 0x32, 0xc, 0x63, 0xdd, 0x1a, 0x5b, 0x4d, 0x3, 0xed, 0xe1}, {0x2d, 0x8a, 0xb2, 0xe, 0x7c, 0x91, 0xe8, 0x68, 0xfa, 0x37, 0x93, 0x4, 0x3, 0x90, 0x56, 0xcf, 0x4, 0xd0, 0xee, 0xa3}, {0x2, 0xd0, 0x4a, 0x7, 0xc7, 0x3c, 0xc5, 0x93, 0xe5, 0xa3, 0xfe, 0xa5, 0xb4, 0xc, 0x92, 0x5a, 0x1e, 0xbb, 0xb2, 0x87}, {0x84, 0x56, 0x49, 0x1e, 0x31, 0x33, 0x4, 0xbe, 0xea, 0x35, 0x9c, 0xfc, 0x91, 0x8, 0x6b, 0xd9, 0x59, 0x29, 0xe6, 0xa2}, {0x1f, 0x94, 0xa0, 0xe3, 0x3b, 0x9, 0x88, 0x5f, 0x63, 0x28, 0xba, 0xae, 0xad, 0xf7, 0x6d, 0x8d, 0x74, 0x45, 0x33, 0x79}},
			},
		},
	}
	for _, tt := range shredToParsed {
		t.Run("", func(t *testing.T) {
			parsed, err := parseShredAnyVersion(tt.Raw)
			if err != nil {
				t.Errorf("parseShredAnyVersion() error = %v", err)
			}
			require.Equal(t, tt.Parsed, parsed)
		})
	}
}
